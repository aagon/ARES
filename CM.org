#+TITLE : Prise de notes CM 4I001 ARES
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

Olivier Fourmaux (olivier.fourmaux@sorbonne-universite.fr)
4I001

* Informations pratiques

** Pré-requis

Suppose la complétion du cours 3I014 (Introductions aux réseaux).
Tanenbaum (cours de licence)

Mais cours conçu pour être autosuffisant.

** Contenu

On se concentrera sur TCP/IP, les mécanismes dynamiques anti-congestion.

On part des applications, pour se rapprocher des protocoles et des technologies de bas niveau.

** Horaires et salles

TD et TME sont sur 4 heures contigües. Dans une salle qui a une architecture qui permet la séparation client serveur (14-15:503).

10 semaines (2 semaines par partie)
10 * 2 CM
10 * 4 TD/TME (Lab)

Les cours et les labs sont sur la même semaine (inhabituel : une semaine de décalage en général)

** Examens

Examens répartis (pas de règle du max, moyenne)

1 antisèche *manuscrite* (recto-verso) autorisée.
3-4 questions.

Rattrapage non-autorisé si note supérieure à 10.

** Supports

Documents et supports de cours sont sur la page perso.

Les traces de trafic sont pré-enregistrées et consultables sur le site (en cas de panne, c'est normalement à nous à l'enregistrer).
Les traces sont faisables depuis la maison (droits d'administrateur sur le paquet de logging et de traçage).

Annales d'examen


* Cours 1 : 16/09/2019

Les mécanismes de base ont assez peu changé. (TCP/IP est stable depuis les années 90).

Ce sont le réseau et les applications qui changent.

Réseau transit : Réseau sans machine terminale

Bonne intégration entre UNIX et IP (développé par les mêmes personnes)

** Protocole

#+BEGIN_DEFINITION
Protocole

Description des actions et échanges de messages entre 2+ entités de communication. Format, codage et séquencement des messages doivent y être spécifiés.
#+END_DEFINITION

** Service

#+BEGIN_DEFINITION
TCP

Analogie avec le téléphone (connexion). Plus sûr, mais plus lent. Paquets arrivent dans l'ordre.
#+END_DEFINITION

#+BEGIN_DEFINITION
UDP

Analogie avec la poste (pas de connexion). Moins sûr, paquets perdus ou retardés, mais beaucoup plus rapide.
#+END_DEFINITION

Ces services diffèrent en certaines caractéristiques (ordonnancement, fiabilité, contrôle de flux ou congestion).
On n'a pas de caractéristique de qualité de service, de débit ou de contrainte de temps dans la définition de ces services.

** Standardisation

Groupes de travail IETF réguliers.
Les standards sont des standards de fait plutôt que de droit.

Ce sont les protocoles qui sont contrôlés, pas les machines connectées.

** Topologies

Les applications font abstraction de la topologie du réseau.

Modèle client-serveur
Modèle p2p

** Délais

On peut distinguer différents types de délais :

- Traitement dans le noeud (incompressible)
- File d'attente (nul si pas de congestion)
- Délai de transmission (dépend de la taille du paquet)
- Propagation (Le paquet ne peut pas aller plus vite que la vitesse de la lumière)


* Cours 2 : 23/09/2019

** Applications historiques

à l'origine, Internet était conçu pour le transfert de fichiers.

Dans la couche applicative, on raisonne de bout en bout : on fait abstraction du réseau (des couches inférieures).

#+BEGIN_DEFINITION
Couche application

Ensemble des programmes et protocoles de haut niveau qui permettent aux utilisateurs (les processus) de communiquer.
#+END_DEFINITION

Plusieurs architectures possibles :
- N Clients - 1 serveur : fonctionne sur des requêtes simples, ou pour un petit nombre de clients
- N Clients - M serveurs : Des séries de serveur (plus complexe, plus résilient)
- N Clients-serveurs : P2P

La couche applicative de TCP/IP correspond aux couches Applications, Présentation et Session du modèle OSI.

*** La connexion à distance

Protocoles TELNET, RLOGIN (unix old-school), SSH (unix new-school).

Application de type client serveur.

On a surtout besoin d'interactivité (il ne faudrait pas attendre le prompt trop longtemps).

Notion de Network Virtual Terminal : il faut savoir séparer les commandes (contrôle) des données (caractères du terminal) (contrôle dans la bande).


Aujourd'hui, on utilise Secure Shell (ssh), qui contrairement à telnet ou rlogin, garantit la confidentialité et l'intégrité des données transférées.

*** Transfert de fichiers

Il n'est pas question ici des systèmes de fichiers distants (NFS, SSHFS, SMB), mais des transferts de fichiers explicites.

Signalisation out-of-bands : deux connexions, de contrôle (en général 21) et une de données (en général 20).

Accès interactif (ce qui est une contrainte plus qu'un avantage).

Une connexion par fichier : créé automatiquement une séparation entre les fichiers.


FTP est un vieux protocole, dispose de pleins d'options historiques. Dans les faits, on s'en sert aujourd'hui sur des fichiers non-structurés, codés en ASCII ou en binaire (attention aux conversion DOS/UNIX dans ce cas !), la transmission est faite en flux (TCP)

Les commandes effectives qui passent sur le réseau et les commandes utilisateurs ne sont pas les mêmes : A dire vrai, on peut penser plusieurs implémentations d'un client FTP, qui ont plein de commandes utilisateur différentes des autres implémentations, mais qui sont toujours exprimables en commandes effectives du protocole FTP.


Dans le cas d'un autre protocole, TFTP (Trivial File Transfer Protocol), qui fonctionne sous UDP, vu que la fiabilité des données ne peut pas être garantie au niveau de la couche trnasport (UDP), elle doit être implémentée au niveau de l'application. Dans le cas de TFTP, les paquets sont numérotés : si les numéros ne correspondent pas, la connexion est interrompue.

*** Systèmes de P2P

**** Exemple de Napster

Les utilisateurs chargent la liste des fichiers à partager. Les adresses des fichiers (ou des bouts de fichiers) sont renvoyés aux clients.

Mais le serveur est centralisé (SPOF)

**** Exemple de Gnutella

Recherche par inondation : je demande à N pairs s'ils ont le fichier. S'ils n'ont pas le fichier, ils le demandent à N pairs chacun.

On créé un réseau virtuel. Résilient au départ des pairs (ils peuvent être remplacés par leurs voisins) : dynamique.

Scale très mal.

**** Exemple de bittorrent

Découpage d'un fichier en blocs (chunk)
Le fichier torrent qui contient des méta-données
Tracker supervise la distribution (quoi se trouve où)

Résistance au flash-crowd. Plus résilient avec un plus grand nombre d'utilisateurs.

Problème des free-riders, plusieurs manières de solutionner.

Mesure de la rareté des chunks par le tracker : on pourra optimiser les transmissions en fonction de la rareté, on veut disséminer le fichier dans son ensemble très vite.

Pas de système de recherche implémenté dans le protocole, les fichiers graine qui contiennent l'adresse des trackers doivent être obtenu autrement (par internet).


** Applications principales (Killer apps)

*** La messagerie électronique

Pas dans une application client-serveur classique, le trafic peut passer par des relais.

- Mail User Agent : mu4e, thunderbird, etc...

Les chercheurs ont adoré la messagerie, très pratique dans les années 80 et 90 : courrier très long, téléphone très cher.

- Mail Transfer agent (serveur de mail)

- SMTP : au début fonctionne seulement pour des messages encodés en ASCII NVT.
Le protocole est très simple : en fait, les trucs du genre le sujet, les flags, etc... sont directement dans le message, qui est structuré d'une manière particulière.

**** Evolution de l'encodage :

***** Quoted-printable (Q) :
Echappement, combinaison de caractères

?Charset?encode?encoded-text?
L'échappement se fait avec '='.

=?iso-8859-2?Q?Igen,=20k=F6sz=F6n=F6m?=
 köszönöm (mercè ! en hongrois)

***** Base64 (B)

Trois octets de texte codée sur 4 caractères ASCII

réencodé en binaire, devient du gibberish, pour être désencodé à l'autre bout.

MIME


** Applications de support

Ce qu'il a été besoin de mettre en place pour que les autres applications fonctionnent.


* Cours 3 : 30/09/2019

** Applications de support (suite)

*** La messagerie électronique

**** Nouveaux en-têtes MIME

Le but de MIME est de typer et structurer des envois, pour pouvoir envoyer autre chose que du texte.

Les types MIME (cat /etc/mime.types)

Indique ce que l'objet est.

MIME fonctionne par sous en-tête, qui donne les limites des blocs, et ce que chaque bloc est.

#+BEGIN_EXAMPLE
From: Olivier Fourmaux <olivier.fourmaux@lip6.fr>
Date: Wed, 20 Feb 2002 01:21:01 +0100
To: Toto <toto@free.fr>
Subject: Document no 3.02
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="/9DWx/yDrRhgMJTb"
Content-Disposition: inline Content-Transfer-Encoding: 8bit
User-Agent: Mutt/1.2.5i

--/9DWx/yDrRhgMJTb
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit 

Voici le document secret que vous m’avez demandé...

--/9DWx/yDrRhgMJTb
Content-Type: application/pdf
Content-Disposition: attachment; filename="sujet-exam-RES.pdf"
Content-Transfer-Encoding: base64 
JVBERi0xLjIKJcfsj6IKNSAwIG9iago8PC9MZW5ndGggNiAwIFIvRmlsdGVyIC9GbGF0ZURl
Y29kZT4+CnN0cmVhbQp4nO1dy7YdtRGd3684Mx6L07T63ZkBdghgXvYlJFlMHNsYm+sHhkCS...
#+END_EXAMPLE

**** POP3

Vu qu'on ne peut pas toujours être connecté au serveur de mail, soit par NFS (comme on faisait dans le temps jadis), soit par un terminal vers le mainframe.

POP = Post Office Protocol

Trois phases :
- Autorisation
- Transaction
- Mise à jour

Problème de POP : supprime ou ne supprime pas les messages du serveur, donc ne synchronise pas entre les éventuels clients.

**** IMAP

Internet Mail Access Protocol : permet la synchronisation, mais alors beaucoup plus coûteux : on doit vérifier les états entre les différents clients, résoudre les conflits.

**** Sécurité

Pas de sécurité à l'origine. Comment garantir l'intégrité et l'authenticité des messages ?

Pas du ressort du protocole : c'est au niveau applicatif qu'on peut se démerder pour encrypter.

*** Le World Wide Web

Développé au CERN (diffère de l'internet, qui est juste un regroupement de réseaux).

Permet d'afficher des images, ce qui a fait son succès immédiat. (change de Gopher, où on ne pouvait afficher que du texte)

**** HTTP, principe

HyperText Transfer Protocol

[inclure image]

L'hypertexte est une manière de lire de l'information non-séquentiellement, mais permet d'inclure tout type de données.
HyperText Markup Language : Balises sont des liens vers des ressources à récupérer et mettre dans la page.
C'est au navigateur de se démerder pour reformer tout ça.

Les adresses sont données sous la forme URL :
Protocole://Domaine/Arborescence

De fait, mon navigateur ne gère pas que http, il peut gérer probablement ftp aussi : c'est un client générique

HTTP définit des échanges : requêtes d'objet, réponses

Protocole sans état : très robuste : on peut recommencer où on veut.

**** Structure des requêtes et réponses HTTP

[Inclure échange]

**** Sécurité

Authentification


On est sans état : le serveur peut demander à ce qu'un certain ensemble de paramètres ou d'informations soient stockés en local (puisque rien n'est stocké sur le serveur). Notion de *cookie*. Spécifique au navigateur, par contre. Le navigateur peut n'en tenir aucun compte.

Le serveur enregistre les correspondances entre paramètres stockés et infomation

**** Proxy

On peut imaginer une proximité de contenu entre les utilisateurs : on pourrait imaginer un cache et un serveur unique qui garderait les informations requêtées pour les distribuer : notion de *proxy*, ou de serveur mandataire.

Bénéfice supplémentaire : permet de filtrer et de fliquer.

Réplication des contenus des grands sites : permet de diminuer la latence du chargement.

**** Internet moderne

Le web moderne se charge de plein de choses inutiles et coûteuses. (Modern Web sucks)
Les trucs qui ne servent à rien sont bien entendus chargés en premier, ce serait trop facile sinon, on pourrait couper la communication ensuite.

On a eu besoin d'inventer des optimisations (HTTP 2). Parmi celles-ci, on a les flux multiplexés (plusieurs GET dans une même connexion TCP), la compression binaire des en-têtes, etc...

*** Multimedia

**** RTP & RTCP

Real-Time Transport Protocol (basé sur le protocole de transport UDP)

En vrai, il n'y a pas de temps réel dans l'internet. Associe des horloges au contenu transmis : ne garantit rien de l'ordre du temps réel.

RTCP est un protocole associé à RTP (encapsulé dans un RTP existant)
Standardisé, mais dans une application (pas de port standart).

[Format message RTP]

La source choisit son horloge.

Pour la voix, on va avoir tendance à envoyer les paquets dans l'ordre, et avoir une fréquence d'horloge à peu près égale à l'échantillonnage de l'audio (fréquence des données).

Multicanal (genre stéréo) : Les canaux se suivent dans un même message RTP (le nombre de canaux ne peut pas augmenter n'importe comment)

Pour la vidéo, ça se fait de faire de l'interpolation, de ne pas envoyer les données dans l'ordre. 90kHz : multiple entier pour les fréquences usuelles de restitution des images.

#+BEGIN_DEFINITION
Gigue (en. jitter)

Décalage dans le temps entre le départ et l'arrivée : si on veut pouvoir la calculer, on doit avoir plus de précision que la fréquence de restitution.
#+END_DEFINITION

*** Contrôle de tous ces flux

Principalement hors-bande, plusieurs protocoles, spécifiques à la vidéo, à la téléphonie, etc...


* Annexes

Supports de cours :

[[./CM1/cours1.pdf][Cours 1]]
[[./CM2/cours2.pdf][Cours 2]]


